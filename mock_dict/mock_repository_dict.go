// Code generated by MockGen. DO NOT EDIT.
// Source: domain/repository/dict.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	model "github.com/FirstSS-Sub/Dictionary-search/domain/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDictRepository is a mock of DictRepository interface.
type MockDictRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDictRepositoryMockRecorder
}

// MockDictRepositoryMockRecorder is the mock recorder for MockDictRepository.
type MockDictRepositoryMockRecorder struct {
	mock *MockDictRepository
}

// NewMockDictRepository creates a new mock instance.
func NewMockDictRepository(ctrl *gomock.Controller) *MockDictRepository {
	mock := &MockDictRepository{ctrl: ctrl}
	mock.recorder = &MockDictRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDictRepository) EXPECT() *MockDictRepositoryMockRecorder {
	return m.recorder
}

// FindWord mocks base method.
func (m *MockDictRepository) FindWord(word string) ([]*model.Dict, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindWord", word)
	ret0, _ := ret[0].([]*model.Dict)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindWord indicates an expected call of FindWord.
func (mr *MockDictRepositoryMockRecorder) FindWord(word interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindWord", reflect.TypeOf((*MockDictRepository)(nil).FindWord), word)
}

// FindTag mocks base method.
func (m *MockDictRepository) FindTag(tag string) ([]*model.Dict, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTag", tag)
	ret0, _ := ret[0].([]*model.Dict)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTag indicates an expected call of FindTag.
func (mr *MockDictRepositoryMockRecorder) FindTag(tag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTag", reflect.TypeOf((*MockDictRepository)(nil).FindTag), tag)
}

// Create mocks base method.
func (m *MockDictRepository) Create(dict *model.Dict) (*model.Dict, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", dict)
	ret0, _ := ret[0].(*model.Dict)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockDictRepositoryMockRecorder) Create(dict interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDictRepository)(nil).Create), dict)
}

// Update mocks base method.
func (m *MockDictRepository) Update(dict *model.Dict) (*model.Dict, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", dict)
	ret0, _ := ret[0].(*model.Dict)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockDictRepositoryMockRecorder) Update(dict interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDictRepository)(nil).Update), dict)
}
